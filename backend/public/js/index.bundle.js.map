{"version":3,"sources":["webpack://website-apiServer-Lyrics/./frontend/services/SongService.js","webpack://website-apiServer-Lyrics/./frontend/UI.js","webpack://website-apiServer-Lyrics/./frontend/services/LyricService.js","webpack://website-apiServer-Lyrics/./frontend/services/GenreService.js","webpack://website-apiServer-Lyrics/./frontend/app.js","webpack://website-apiServer-Lyrics/./frontend/models/Song.js","webpack://website-apiServer-Lyrics/./frontend/models/Lyrics.js"],"names":["songService","this","URI","response","fetch","json","songId","song","reponse","headers","method","body","data","console","log","songTitle","genreService","lyricId","lyric","genreId","genre","songs","getSongs","songsCardContainer","document","getElementById","innerHTML","forEach","div","createElement","className","title","_id","appendChild","async","songsGenreContainer","getGenre","name","lyricText","postSong","clearSongFrom","renderSongs","reset","message","colorMessage","secondsToRemove","createTextNode","container","querySelector","songForm","insertBefore","setTimeout","remove","songID","deleteSong","addEventListener","ui","renderGenre","e","value","text","formData","FormData","append","genres","JSON","stringify","addANewSong","toJson","renderMessage","preventDefault","target","classList","contains","getAttribute"],"mappings":"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","file":"js/index.bundle.js","sourcesContent":["class SongService {\r\n    constructor() {\r\n     //   this.URI =  'http://localhost:3000/api/songs';\r\n        this.URI =  '/api/songs';\r\n    }\r\n\r\n    async getSongs() {\r\n        // fetch por defecto hace GET\r\n        const response = await fetch(this.URI);\r\n        const songs = await response.json()\r\n        return songs;\r\n    }\r\n\r\n    async getSong(songId) {\r\n        const response = await fetch(`${this.URI}/${songId}`, {\r\n\r\n        });\r\n        const song = await response.json();\r\n        return song;\r\n    }\r\n\r\n    async postSong(song) {\r\n        const reponse = await fetch(this.URI, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: song\r\n        });\r\n        return await reponse.json();\r\n    }\r\n\r\n    async deleteSong(songId) {\r\n        const response = await fetch(`${this.URI}/${songId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE'\r\n        });\r\n        const data = await response.json();\r\n        console.log(data);\r\n    }\r\n\r\n    async searchSongLike(songTitle) {\r\n        console.log(songTitle);\r\n        const response = await fetch(`${this.URI}/search/search?q=${songTitle}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'GET'\r\n        });\r\n        return await response.json();\r\n    }\r\n\r\n}\r\nexport default SongService;","import  SongService from './services/SongService';\r\nimport LyricService from \"./services/LyricService\";\r\nimport GenreService from \"./services/GenreService\";\r\nconst songService = new SongService();\r\nconst lyricService = new LyricService();\r\nconst genreService = new GenreService();\r\n\r\nclass UI {\r\n\r\n    async renderSongs() {\r\n        const songs = await songService.getSongs();\r\n        const songsCardContainer = document.getElementById('songs-cards');\r\n        songsCardContainer.innerHTML = '';\r\n        songs.forEach(song  => {\r\n            const div = document.createElement('div');\r\n            div.className = '';\r\n            div.innerHTML = `\r\n            <div class=\"card m-2\">\r\n            <div class=\"row\">\r\n            <div class=\"col-md-8\">\r\n            <div class=\"card-block px-2\">\r\n            <h4 class=\"card-title\"> ${song.title} </h4>\r\n            <p class=\"card-text\" id=\"song-id-${song._id}\"> \r\n            </p>\r\n            <a href=\"#\" class=\"btn btn-danger delete\" _id=\"${song._id}\">X</a>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            `;\r\n            songsCardContainer.appendChild(div);\r\n        })\r\n    }\r\n\r\n    async renderGenre() {\r\n        const songs = await songService.getSongs();\r\n        songs.forEach(async (song) => {\r\n            const songsGenreContainer = document.getElementById('song-id-' + song._id);\r\n            songsGenreContainer.innerHTML = '';\r\n            song.genre.forEach(async (genreId) => {\r\n                const genre = await genreService.getGenre(genreId);\r\n                const div = document.createElement('div');\r\n                div.innerHTML = '';\r\n                div.innerHTML = `\r\n            <span class=\"badge badge-pill badge-success\"> ${genre.name} </span>\r\n            `;\r\n                songsGenreContainer.appendChild(div);\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    async addANewSong(song,lyricText) {\r\n        await songService.postSong(song);\r\n\r\n        this.clearSongFrom();\r\n        this.renderSongs();\r\n    }\r\n\r\n    clearSongFrom() {\r\n        document.getElementById('song-form').reset();\r\n    }\r\n\r\n    renderMessage(message, colorMessage, secondsToRemove) {\r\n        const div = document.createElement('div');\r\n        div.className = `alert alert-${colorMessage}`;\r\n        div.appendChild(document.createTextNode(message));\r\n\r\n        const container = document.querySelector('.col-md-4');\r\n        const songForm = document.querySelector('#song-form');\r\n\r\n        container.insertBefore(div, songForm);\r\n        setTimeout(() => {\r\n            document.querySelector('.alert').remove();\r\n        }, secondsToRemove);\r\n\r\n\r\n    }\r\n\r\n    async deleteSong(songID) {\r\n        await songService.deleteSong(songID);\r\n        this.renderSongs();\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default UI;","class LyricService {\r\n    constructor() {\r\n      //  this.URI =  'http://localhost:3000/api/lyrics';\r\n        this.URI =  '/api/lyrics';\r\n    }\r\n\r\n    async getLyrics() {\r\n        // fetch por defecto hace GET\r\n        const response = await fetch(this.URI);\r\n        const lyric = await response.json()\r\n        return lyric;\r\n    }\r\n\r\n    async getLyric(lyricId) {\r\n        const response = await fetch(`${this.URI}/${lyricId}`, {\r\n\r\n        });\r\n        const lyric = await response.json();\r\n        return lyric;\r\n    }\r\n\r\n    async postLyric(lyric) {\r\n        console.log(lyric, 'ANTES LOG');\r\n        const reponse = await fetch(this.URI, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: lyric\r\n        });\r\n        const data = await reponse.json();\r\n    }\r\n\r\n    async deleteLyric(lyricId) {\r\n        const response = await fetch(`${this.URI}/${lyricId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE'\r\n        });\r\n        const data = await response.json();\r\n    }\r\n\r\n}\r\nexport default LyricService;","class GenreService {\r\n    constructor() {\r\n       // this.URI = 'http://localhost:3000/api/genres';\r\n        this.URI = '/api/genres';\r\n    }\r\n\r\n    async getGenres() {\r\n        // fetch por defecto hace GET\r\n        const response = await fetch(this.URI);\r\n        const genres = await response.json()\r\n        return genres;\r\n    }\r\n\r\n    async getGenre(genreId) {\r\n        const response = await fetch(`${this.URI}/${genreId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'GET'\r\n        });\r\n        const genre = await response.json();\r\n        return genre;\r\n    }\r\n\r\n    async postSong(genre) {\r\n        console.log(genre, 'ANTES LOG');\r\n        const reponse = await fetch(this.URI, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: genre\r\n        });\r\n        return await reponse.json();\r\n    }\r\n\r\n    async deleteSong(genreId) {\r\n        const response = await fetch(`${this.URI}/${genreId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE'\r\n        });\r\n        const data = await response.json();\r\n    }\r\n\r\n}\r\nexport default GenreService;","import './styles/style.css';\r\nimport UI from './UI';\r\nimport Song from \"./models/Song\";\r\nimport Lyric from \"./models/Lyrics\";\r\n\r\n\r\n\r\n//evento que carga antes datos\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const ui = new UI();\r\n    ui.renderSongs();\r\n    ui.renderGenre();\r\n});\r\n\r\n// Formulario de alta cancion\r\ndocument.getElementById('song-form')\r\n    .addEventListener('submit', e => {\r\n        const title = document.getElementById('title').value;\r\n        const text = document.getElementById('text').value;\r\n\r\n        const formData = new FormData();\r\n        formData.append('title', title);\r\n        // todo agregar el token al momento del alta de canciones\r\n        formData.append('genres','{}')\r\n        formData.append('text', text);\r\n\r\n        const ui = new UI();\r\n        const song = new Song(title, [], new Lyric(text));\r\n\r\n\r\n        ui.addANewSong(song.toJson());\r\n        ui.renderMessage('New Song Added', 'success', 3000);\r\n\r\n\r\n        e.preventDefault();\r\n\r\n    });\r\n\r\ndocument.getElementById('songs-cards')\r\n    .addEventListener('click', e => {\r\n        if (e.target.classList.contains('delete')) {\r\n            const ui = new UI();\r\n            ui.deleteSong(e.target.getAttribute('_id'));\r\n            ui.renderMessage('Song Remove', 'danger', 2000);\r\n        }\r\n        e.preventDefault();\r\n    });\r\n","import Genres from \"./Genres\";\r\n\r\nclass Song {\r\n    constructor(title,[genres], lyric) {\r\n        this.title = title;\r\n        this.genres = genres;\r\n        this.lyric = lyric;\r\n    }\r\n\r\n    toJson() {\r\n        const dataJson = JSON.stringify({\r\n            title: this.title,\r\n            genres: this.genres,\r\n            lyric: this.lyric\r\n        })\r\n        return dataJson;\r\n    }\r\n}\r\n\r\nexport default Song;","class Lyric {\r\n    constructor(text) {\r\n        this.text = text;\r\n    }\r\n\r\n    toJson() {\r\n        const dataJson = JSON.stringify({\r\n            text: this.text\r\n        })\r\n        return dataJson;\r\n    }\r\n}\r\n\r\nexport default Lyric;"],"sourceRoot":""}