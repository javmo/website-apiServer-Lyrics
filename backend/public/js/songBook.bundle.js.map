{"version":3,"sources":["webpack://website-apiServer-Lyrics/./frontend/services/SongService.js","webpack://website-apiServer-Lyrics/./frontend/services/LyricService.js","webpack://website-apiServer-Lyrics/./frontend/UI.js","webpack://website-apiServer-Lyrics/./frontend/services/GenreService.js","webpack://website-apiServer-Lyrics/./frontend/UISongBook.js","webpack://website-apiServer-Lyrics/./frontend/services/CategoryService.js","webpack://website-apiServer-Lyrics/./frontend/services/LyricPublishService.js","webpack://website-apiServer-Lyrics/./frontend/songBook.js"],"names":["this","URI","response","fetch","json","songId","song","reponse","headers","method","body","data","console","log","songTitle","lyricId","lyric","genreId","genre","categoryService","lyricPubService","lyricPub","lyricPubId","categories","getCategories","songsBookContainer","document","getElementById","innerHTML","forEach","category","div","createElement","className","id","_id","appendChild","categoryType","div2","getLyricsPublish","async","categoryContainer","getSong","textHtml","getLyric","text","title","addEventListener","uiSongBook","renderCategory","renderCategory2","renderSongBook","e","target","classList","contains","preventDefault"],"mappings":"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","file":"js/songBook.bundle.js","sourcesContent":["class SongService {\r\n    constructor() {\r\n     //   this.URI =  'http://localhost:3000/api/songs';\r\n        this.URI =  '/api/songs';\r\n    }\r\n\r\n    async getSongs() {\r\n        // fetch por defecto hace GET\r\n        const response = await fetch(this.URI);\r\n        const songs = await response.json()\r\n        return songs;\r\n    }\r\n\r\n    async getSong(songId) {\r\n        const response = await fetch(`${this.URI}/${songId}`, {\r\n\r\n        });\r\n        const song = await response.json();\r\n        return song;\r\n    }\r\n\r\n    async postSong(song) {\r\n        const reponse = await fetch(this.URI, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: song\r\n        });\r\n        return await reponse.json();\r\n    }\r\n\r\n    async deleteSong(songId) {\r\n        const response = await fetch(`${this.URI}/${songId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE'\r\n        });\r\n        const data = await response.json();\r\n        console.log(data);\r\n    }\r\n\r\n    async searchSongLike(songTitle) {\r\n        console.log(songTitle);\r\n        const response = await fetch(`${this.URI}/search/search?q=${songTitle}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'GET'\r\n        });\r\n        return await response.json();\r\n    }\r\n\r\n}\r\nexport default SongService;","class LyricService {\r\n    constructor() {\r\n      //  this.URI =  'http://localhost:3000/api/lyrics';\r\n        this.URI =  '/api/lyrics';\r\n    }\r\n\r\n    async getLyrics() {\r\n        // fetch por defecto hace GET\r\n        const response = await fetch(this.URI);\r\n        const lyric = await response.json()\r\n        return lyric;\r\n    }\r\n\r\n    async getLyric(lyricId) {\r\n        const response = await fetch(`${this.URI}/${lyricId}`, {\r\n\r\n        });\r\n        const lyric = await response.json();\r\n        return lyric;\r\n    }\r\n\r\n    async postLyric(lyric) {\r\n        console.log(lyric, 'ANTES LOG');\r\n        const reponse = await fetch(this.URI, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: lyric\r\n        });\r\n        const data = await reponse.json();\r\n    }\r\n\r\n    async deleteLyric(lyricId) {\r\n        const response = await fetch(`${this.URI}/${lyricId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE'\r\n        });\r\n        const data = await response.json();\r\n    }\r\n\r\n}\r\nexport default LyricService;","import  SongService from './services/SongService';\r\nimport Lyric from \"./models/Lyrics\";\r\nimport LyricService from \"./services/LyricService\";\r\nimport GenreService from \"./services/GenreService\";\r\nconst songService = new SongService();\r\nconst lyricService = new LyricService();\r\nconst genreService = new GenreService();\r\n\r\nclass UI {\r\n\r\n    async renderSongs() {\r\n        const songs = await songService.getSongs();\r\n        const songsCardContainer = document.getElementById('songs-cards');\r\n        songsCardContainer.innerHTML = '';\r\n        songs.forEach(song  => {\r\n            const div = document.createElement('div');\r\n            div.className = '';\r\n            div.innerHTML = `\r\n            <div class=\"card m-2\">\r\n            <div class=\"row\">\r\n            <div class=\"col-md-8\">\r\n            <div class=\"card-block px-2\">\r\n            <h4 class=\"card-title\"> ${song.title} </h4>\r\n            <p class=\"card-text\" id=\"song-id-${song._id}\"> \r\n            </p>\r\n            <a href=\"#\" class=\"btn btn-danger delete\" _id=\"${song._id}\">X</a>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            `;\r\n            songsCardContainer.appendChild(div);\r\n        })\r\n        console.log(songs);\r\n    }\r\n\r\n    async renderGenre() {\r\n        const songs = await songService.getSongs();\r\n        songs.forEach(async (song) => {\r\n            const songsGenreContainer = document.getElementById('song-id-' + song._id);\r\n            songsGenreContainer.innerHTML = '';\r\n            song.genre.forEach(async (genreId) => {\r\n                const genre = await genreService.getGenre(genreId);\r\n                const div = document.createElement('div');\r\n                div.innerHTML = '';\r\n                div.innerHTML = `\r\n            <span class=\"badge badge-pill badge-success\"> ${genre.name} </span>\r\n            `;\r\n                songsGenreContainer.appendChild(div);\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    async addANewSong(song,lyricText) {\r\n        await songService.postSong(song);\r\n\r\n        this.clearSongFrom();\r\n        this.renderSongs();\r\n    }\r\n\r\n    clearSongFrom() {\r\n        document.getElementById('song-form').reset();\r\n    }\r\n\r\n    renderMessage(message, colorMessage, secondsToRemove) {\r\n        const div = document.createElement('div');\r\n        div.className = `alert alert-${colorMessage}`;\r\n        div.appendChild(document.createTextNode(message));\r\n\r\n        const container = document.querySelector('.col-md-4');\r\n        const songForm = document.querySelector('#song-form');\r\n\r\n        container.insertBefore(div, songForm);\r\n        setTimeout(() => {\r\n            document.querySelector('.alert').remove();\r\n        }, secondsToRemove);\r\n\r\n\r\n    }\r\n\r\n    async deleteSong(songID) {\r\n        await songService.deleteSong(songID);\r\n        this.renderSongs();\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default UI;","class GenreService {\r\n    constructor() {\r\n       // this.URI = 'http://localhost:3000/api/genres';\r\n        this.URI = '/api/genres';\r\n    }\r\n\r\n    async getGenres() {\r\n        // fetch por defecto hace GET\r\n        const response = await fetch(this.URI);\r\n        const genres = await response.json()\r\n        return genres;\r\n    }\r\n\r\n    async getGenre(genreId) {\r\n        const response = await fetch(`${this.URI}/${genreId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'GET'\r\n        });\r\n        const genre = await response.json();\r\n        return genre;\r\n    }\r\n\r\n    async postSong(genre) {\r\n        console.log(genre, 'ANTES LOG');\r\n        const reponse = await fetch(this.URI, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: genre\r\n        });\r\n        return await reponse.json();\r\n    }\r\n\r\n    async deleteSong(genreId) {\r\n        const response = await fetch(`${this.URI}/${genreId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE'\r\n        });\r\n        const data = await response.json();\r\n    }\r\n\r\n}\r\nexport default GenreService;","import SongService from \"./services/SongService\";\r\nimport CategoryService from \"./services/CategoryService\";\r\nimport LyricPublishService from \"./services/LyricPublishService\";\r\nconst lyricService = new LyricService();\r\nimport UI from \"./UI\";\r\nimport LyricService from \"./services/LyricService\";\r\n\r\nconst songService = new SongService();\r\nconst categoryService = new CategoryService();\r\nconst lyricPubService = new LyricPublishService()\r\n\r\nclass UISongBook {\r\n\r\n    async renderCategory() {\r\n        const categories = await categoryService.getCategories();\r\n        const songsBookContainer = document.getElementById('songsBook-card');\r\n\r\n        songsBookContainer.innerHTML = '';\r\n        categories.forEach(category => {\r\n            const div = document.createElement('div');\r\n            div.className = 'card text-white bg-secondary mb-3';\r\n            div.id = 'card-category-'+ category._id;\r\n\r\n            songsBookContainer.appendChild(div);\r\n        })\r\n    }\r\n\r\n    async renderCategory2() {\r\n        const categories = await categoryService.getCategories();\r\n\r\n        categories.forEach(category => {\r\n            const songsBookContainer = document.getElementById('card-category-' + category._id);\r\n            songsBookContainer.innerHTML = '';\r\n            const div = document.createElement('div');\r\n            div.className = 'card-header';\r\n            div.id = 'header-category-'+ category._id;\r\n            div.innerHTML = `\r\n            ${ category.categoryType }\r\n            `\r\n            songsBookContainer.appendChild(div);\r\n\r\n            const div2 = document.createElement('div');\r\n            div2.className = 'card-body';\r\n            div2.id = 'body-category-'+ category._id;\r\n            songsBookContainer.appendChild(div2);\r\n\r\n\r\n\r\n        })\r\n    }\r\n\r\n    async renderSongBook() {\r\n        const lyricsPub = await lyricPubService.getLyricsPublish();\r\n\r\n        lyricsPub.forEach( async (lyricPub) => {\r\n            const categoryContainer = document.getElementById('body-category-' + lyricPub.category);\r\n            if(categoryContainer != null) {\r\n                categoryContainer.innerHTML = '';\r\n\r\n                const song = await songService.getSong(lyricPub.song);\r\n                const lyric = await lyricService.getLyric(song.lyric);\r\n\r\n\r\n                const textHtml = ``+ lyric.text ;\r\n\r\n                const div = document.createElement('div');\r\n                div.className = '';\r\n                div.id = 'card-category-'+ lyricPub._id;\r\n                div.innerHTML = `\r\n                <h4 class=\"card-title\" id=\"song-title-${lyricPub._id}\">${song.title}</h4>\r\n                `\r\n                + textHtml\r\n                ;\r\n                categoryContainer.appendChild(div);\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n\r\n    async renderCategory3() {\r\n        const categories = await categoryService.getCategories();\r\n\r\n        categories.forEach(category => {\r\n            const songsBookContainer = document.getElementById('card-category-' + category._id);\r\n            songsBookContainer.innerHTML = '';\r\n            const div = document.createElement('div');\r\n            div.className = 'card-header';\r\n            div.id = 'header-category-'+ category._id;\r\n            div.innerHTML = `\r\n            ${ category.categoryType }\r\n            `\r\n            songsBookContainer.appendChild(div);\r\n\r\n            const div2 = document.createElement('div');\r\n            div2.className = 'card-body';\r\n            div2.id = 'body-category-'+ category._id;\r\n            songsBookContainer.appendChild(div2);\r\n\r\n\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default UISongBook;","class CategoryService {\r\n    constructor() {\r\n     //   this.URI = 'http://localhost:3000/api/category';\r\n        this.URI = '/api/category';\r\n    }\r\n\r\n    async getCategories() {\r\n        // fetch por defecto hace GET\r\n        const response = await fetch(this.URI);\r\n        const categories = await response.json()\r\n        return categories;\r\n    }\r\n\r\n/*    async postLyricPublish(lyricPub) {\r\n        console.log(song, 'ANTES LOG');\r\n        const reponse = await fetch(this.URI, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: lyricPub\r\n        });\r\n        return await reponse.json();\r\n        console.log(data, 'DESPUES LOG');\r\n    }\r\n\r\n    async deleteLyricPublish(lyricPubId) {\r\n        const response = await fetch(`${this.URI}/${lyricPubId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE'\r\n        });\r\n        const data = await response.json();\r\n        console.log(data);\r\n    }*/\r\n\r\n}\r\nexport default CategoryService;","class LyricPublishService {\r\n    constructor() {\r\n      //  this.URI = 'http://localhost:3000/api/lyricsPublish';\r\n        this.URI = '/api/lyricsPublish';\r\n    }\r\n\r\n    async getLyricsPublish() {\r\n        // fetch por defecto hace GET\r\n        const response = await fetch(this.URI);\r\n        const lyricsPub = await response.json()\r\n        return lyricsPub;\r\n    }\r\n\r\n    async postLyricPublish(lyricPub) {\r\n        const reponse = await fetch(this.URI, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: lyricPub\r\n        });\r\n        return await reponse.json();\r\n    }\r\n\r\n    async deleteLyricPublish(lyricPubId) {\r\n        const response = await fetch(`${this.URI}/${lyricPubId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE'\r\n        });\r\n        const data = await response.json();\r\n    }\r\n\r\n}\r\nexport default LyricPublishService;","import './styles/style.css';\r\nimport UISongBook from \"./UISongBook\";\r\nimport UI from \"./UI\";\r\n\r\n\r\n\r\n\r\n//evento que carga antes datos\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const uiSongBook = new UISongBook();\r\n    uiSongBook.renderCategory();\r\n    uiSongBook.renderCategory2();\r\n    uiSongBook.renderSongBook();\r\n\r\n});\r\n\r\ndocument.getElementById('btn-update')\r\n    .addEventListener('click', e => {\r\n        if (e.target.classList.contains('update')) {\r\n            const uiSongBook = new UISongBook();\r\n\r\n            uiSongBook.renderSongBook();;\r\n        }\r\n        e.preventDefault();\r\n    });"],"sourceRoot":""}