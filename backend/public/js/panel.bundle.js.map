{"version":3,"sources":["webpack://website-apiServer-Lyrics/./frontend/services/SongService.js","webpack://website-apiServer-Lyrics/./frontend/UIPanel.js","webpack://website-apiServer-Lyrics/./frontend/services/CategoryService.js","webpack://website-apiServer-Lyrics/./frontend/services/LyricPublishService.js","webpack://website-apiServer-Lyrics/./frontend/services/LyricService.js","webpack://website-apiServer-Lyrics/./frontend/services/GenreService.js","webpack://website-apiServer-Lyrics/./frontend/panel.js","webpack://website-apiServer-Lyrics/./frontend/models/LyricsPublish.js"],"names":["this","URI","response","fetch","json","songId","song","reponse","headers","method","body","data","console","log","songTitle","songService","categoryService","lyricPubService","lyricPub","lyricPubId","lyricId","lyric","genreId","genre","getSongs","e","songs","searchSongLike","target","value","suggestions","document","querySelector","categories","getCategories","htmlCategory","map","category","_id","categoryType","join","html","RegExp","title","innerHTML","lyricsPub","getLyricsPublish","lyricCardContainer","getElementById","forEach","async","getSong","div","createElement","className","appendChild","postLyricPublish","renderLyricPub","reset","message","colorMessage","secondsToRemove","createTextNode","container","searchForm","insertBefore","setTimeout","remove","deleteLyricPublish","addEventListener","uiPanel","displayMatches","classList","contains","getAttribute","categoryId","selectedOptions","JSON","stringify","addANewLyricPub","toJson","renderMessage","preventDefault","unpublishLyric"],"mappings":"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","file":"js/panel.bundle.js","sourcesContent":["class SongService {\r\n    constructor() {\r\n     //   this.URI =  'http://localhost:3000/api/songs';\r\n        this.URI =  '/api/songs';\r\n    }\r\n\r\n    async getSongs() {\r\n        // fetch por defecto hace GET\r\n        const response = await fetch(this.URI);\r\n        const songs = await response.json()\r\n        return songs;\r\n    }\r\n\r\n    async getSong(songId) {\r\n        const response = await fetch(`${this.URI}/${songId}`, {\r\n\r\n        });\r\n        const song = await response.json();\r\n        return song;\r\n    }\r\n\r\n    async postSong(song) {\r\n        const reponse = await fetch(this.URI, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: song\r\n        });\r\n        return await reponse.json();\r\n    }\r\n\r\n    async deleteSong(songId) {\r\n        const response = await fetch(`${this.URI}/${songId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE'\r\n        });\r\n        const data = await response.json();\r\n        console.log(data);\r\n    }\r\n\r\n    async searchSongLike(songTitle) {\r\n        console.log(songTitle);\r\n        const response = await fetch(`${this.URI}/search/search?q=${songTitle}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'GET'\r\n        });\r\n        return await response.json();\r\n    }\r\n\r\n}\r\nexport default SongService;","import  SongService from './services/SongService';\r\nimport Lyric from \"./models/Lyrics\";\r\nimport LyricService from \"./services/LyricService\";\r\nimport GenreService from \"./services/GenreService\";\r\nimport CategoryService from \"./services/CategoryService\";\r\nimport LyricPublishService from \"./services/LyricPublishService\";\r\nconst songService = new SongService();\r\nconst categoryService = new CategoryService();\r\nconst lyricPubService = new LyricPublishService()\r\nconst lyricService = new LyricService();\r\nconst genreService = new GenreService();\r\n\r\n\r\nclass UIPanel {\r\n\r\n    async loadSongs() {\r\n       return await songService.getSongs();\r\n\r\n    }\r\n\r\n    async displayMatches(e) {\r\n        const songs = await songService.searchSongLike(e.target.value);\r\n        console.log(e.target.value);\r\n        const suggestions = document.querySelector('#table-hover');\r\n        const categories = await categoryService.getCategories();\r\n        console.log(categories)\r\n\r\n        const htmlCategory = categories.map( category => {\r\n          return `<option value=\"${category._id}\">  ${category.categoryType}  </option>`;\r\n\r\n        }).join('');\r\n\r\n\r\n        const html = songs.map(song => {\r\n            const regex = new RegExp(e.target.value, 'gi');\r\n\r\n            return `\r\n                <tbody>\r\n                <th scope=\"row\">${song.title} </th> \r\n                <td> id# ${song._id} </td> \r\n                <td>\r\n                    <select class=\"form-control\" id=\"exampleSelect1-${song._id}\"> \r\n                    <option value=\"\" disabled selected>Select Category ...</option>\r\n                `\r\n                +\r\n                htmlCategory\r\n                +\r\n                `\r\n                    </select>\r\n                </td>\r\n                <td>\r\n                    <button type=\"button\" class=\"btn btn-success publish\" _id=\"${song._id}\">Publish</button>    \r\n                </td>\r\n                </tbody>\r\n            `\r\n\r\n        }).join('');\r\n        suggestions.innerHTML = html;\r\n    }\r\n\r\n    async renderLyricPub() {\r\n        const lyricsPub = await lyricPubService.getLyricsPublish();\r\n        const lyricCardContainer = document.getElementById('lyricPub-cards');\r\n        lyricCardContainer.innerHTML = '';\r\n        lyricsPub.forEach( async (lyricPub)  => {\r\n            const song = await songService.getSong(lyricPub.song);\r\n\r\n            const div = document.createElement('div');\r\n            div.className = '';\r\n            div.innerHTML = `\r\n            <div class=\"card m-2\">\r\n            <div class=\"row\">\r\n            <div class=\"col-md-8\">\r\n            <div class=\"card-block px-2\">\r\n            <h4 class=\"card-title\"> ${song.title} </h4>\r\n            <p class=\"card-text\" id=\"song-id-${lyricPub._id}\"> \r\n            </p>\r\n            <a href=\"#\" class=\"btn btn-danger delete\" _id=\"${lyricPub._id}\">X</a>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            `;\r\n            lyricCardContainer.appendChild(div);\r\n        })\r\n    }\r\n\r\n\r\n    async addANewLyricPub(lyricPub) {\r\n        await lyricPubService.postLyricPublish(lyricPub);\r\n        this.renderLyricPub();\r\n    }\r\n\r\n    clearSongFrom() {\r\n        document.getElementById('song-form').reset();\r\n    }\r\n\r\n    renderMessage(message, colorMessage, secondsToRemove) {\r\n        const div = document.createElement('div');\r\n        div.className = `alert alert-${colorMessage}`;\r\n        div.appendChild(document.createTextNode(message));\r\n\r\n        const container = document.getElementById('app');\r\n        const searchForm = document.querySelector('.row');\r\n\r\n        container.insertBefore(div, searchForm);\r\n        setTimeout(() => {\r\n            document.querySelector('.alert').remove();\r\n        }, secondsToRemove);\r\n\r\n    }\r\n\r\n    async unpublishLyric(lyricPubId) {\r\n        await lyricPubService.deleteLyricPublish(lyricPubId);\r\n        this.renderLyricPub();\r\n    }\r\n\r\n}\r\n\r\nexport default UIPanel;","class CategoryService {\r\n    constructor() {\r\n     //   this.URI = 'http://localhost:3000/api/category';\r\n        this.URI = '/api/category';\r\n    }\r\n\r\n    async getCategories() {\r\n        // fetch por defecto hace GET\r\n        const response = await fetch(this.URI);\r\n        const categories = await response.json()\r\n        return categories;\r\n    }\r\n\r\n/*    async postLyricPublish(lyricPub) {\r\n        console.log(song, 'ANTES LOG');\r\n        const reponse = await fetch(this.URI, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: lyricPub\r\n        });\r\n        return await reponse.json();\r\n        console.log(data, 'DESPUES LOG');\r\n    }\r\n\r\n    async deleteLyricPublish(lyricPubId) {\r\n        const response = await fetch(`${this.URI}/${lyricPubId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE'\r\n        });\r\n        const data = await response.json();\r\n        console.log(data);\r\n    }*/\r\n\r\n}\r\nexport default CategoryService;","class LyricPublishService {\r\n    constructor() {\r\n      //  this.URI = 'http://localhost:3000/api/lyricsPublish';\r\n        this.URI = '/api/lyricsPublish';\r\n    }\r\n\r\n    async getLyricsPublish() {\r\n        // fetch por defecto hace GET\r\n        const response = await fetch(this.URI);\r\n        const lyricsPub = await response.json()\r\n        return lyricsPub;\r\n    }\r\n\r\n    async postLyricPublish(lyricPub) {\r\n        const reponse = await fetch(this.URI, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: lyricPub\r\n        });\r\n        return await reponse.json();\r\n    }\r\n\r\n    async deleteLyricPublish(lyricPubId) {\r\n        const response = await fetch(`${this.URI}/${lyricPubId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE'\r\n        });\r\n        const data = await response.json();\r\n    }\r\n\r\n}\r\nexport default LyricPublishService;","class LyricService {\r\n    constructor() {\r\n      //  this.URI =  'http://localhost:3000/api/lyrics';\r\n        this.URI =  '/api/lyrics';\r\n    }\r\n\r\n    async getLyrics() {\r\n        // fetch por defecto hace GET\r\n        const response = await fetch(this.URI);\r\n        const lyric = await response.json()\r\n        return lyric;\r\n    }\r\n\r\n    async getLyric(lyricId) {\r\n        const response = await fetch(`${this.URI}/${lyricId}`, {\r\n\r\n        });\r\n        const lyric = await response.json();\r\n        return lyric;\r\n    }\r\n\r\n    async postLyric(lyric) {\r\n        console.log(lyric, 'ANTES LOG');\r\n        const reponse = await fetch(this.URI, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: lyric\r\n        });\r\n        const data = await reponse.json();\r\n    }\r\n\r\n    async deleteLyric(lyricId) {\r\n        const response = await fetch(`${this.URI}/${lyricId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE'\r\n        });\r\n        const data = await response.json();\r\n    }\r\n\r\n}\r\nexport default LyricService;","class GenreService {\r\n    constructor() {\r\n       // this.URI = 'http://localhost:3000/api/genres';\r\n        this.URI = '/api/genres';\r\n    }\r\n\r\n    async getGenres() {\r\n        // fetch por defecto hace GET\r\n        const response = await fetch(this.URI);\r\n        const genres = await response.json()\r\n        return genres;\r\n    }\r\n\r\n    async getGenre(genreId) {\r\n        const response = await fetch(`${this.URI}/${genreId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'GET'\r\n        });\r\n        const genre = await response.json();\r\n        return genre;\r\n    }\r\n\r\n    async postSong(genre) {\r\n        console.log(genre, 'ANTES LOG');\r\n        const reponse = await fetch(this.URI, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: genre\r\n        });\r\n        return await reponse.json();\r\n    }\r\n\r\n    async deleteSong(genreId) {\r\n        const response = await fetch(`${this.URI}/${genreId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE'\r\n        });\r\n        const data = await response.json();\r\n    }\r\n\r\n}\r\nexport default GenreService;","import './styles/style.css';\r\nimport UIPanel from './UIPanel';\r\nconst songService = new SongService();\r\nimport Song from \"./models/Song\";\r\nimport Lyric from \"./models/Lyrics\";\r\nimport SongService from \"./services/SongService\";\r\nimport LyricsPublish from \"./models/LyricsPublish\";\r\n\r\n\r\n\r\n/*const songs = await songService.getSongs();*/\r\n\r\n\r\n\r\n//evento que carga antes datos\r\n document.addEventListener('DOMContentLoaded', () => {\r\n    const uiPanel = new UIPanel();\r\n    uiPanel.renderLyricPub();\r\n/*     songs =  uiPanel.loadSongs();\r\n     uiPanel.renderGenre();*/\r\n});\r\n\r\n\r\n/*document.querySelector('.search')\r\n    .addEventListener('change', e => {\r\n\r\n        const uiPanel = new UIPanel();\r\n        uiPanel.loadSongs();\r\n //       const songs = UIPanel.loadSongs();\r\n        uiPanel.displayMatches(e);\r\n    });*/\r\n\r\ndocument.querySelector(\"#search-songs\")\r\n    .addEventListener('keyup', e => {\r\n        const uiPanel = new UIPanel();\r\n        if(e.target.value != [])\r\n            uiPanel.displayMatches(e);\r\n    });\r\n\r\n/*    .addEventListener('keyup', e => {\r\n        const uiPanel = new UIPanel();\r\n        uiPanel.displayMatches();\r\n    });*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Formulario de alta cancion\r\ndocument.getElementById('search-content')\r\n    .addEventListener('click', e => {\r\n        if (e.target.classList.contains('publish')) {\r\n            console.log('entra puiblish');\r\n            const songId = e.target.getAttribute('_id');\r\n            console.log(songId);\r\n            const categoryId = document.getElementById('exampleSelect1-' + songId)\r\n                .selectedOptions[0].value;\r\n            console.log(categoryId);\r\n\r\n            const lyricPub = new LyricsPublish(songId,categoryId);\r\n            const uiPanel = new UIPanel();\r\n            uiPanel.addANewLyricPub(lyricPub.toJson());\r\n            uiPanel.renderMessage('Lyric Published', 'success', 3000);\r\n\r\n        }\r\n\r\n        e.preventDefault();\r\n\r\n    });\r\n\r\ndocument.getElementById('lyricPub-cards')\r\n    .addEventListener('click', e => {\r\n        if (e.target.classList.contains('delete')) {\r\n            const uiPanel = new UIPanel();\r\n            uiPanel.unpublishLyric(e.target.getAttribute('_id'));\r\n            uiPanel.renderMessage('Lyric unpublished', 'danger', 2000);\r\n        }\r\n        e.preventDefault();\r\n    });\r\n","class LyricsPublish {\r\n    constructor(songId, categoryId) {\r\n        this.song = songId;\r\n        this.category = categoryId;\r\n    }\r\n\r\n    toJson() {\r\n        const dataJson = JSON.stringify({\r\n            song: this.song,\r\n            category: this.category\r\n        })\r\n        return dataJson;\r\n    }\r\n}\r\n\r\nexport default LyricsPublish;"],"sourceRoot":""}