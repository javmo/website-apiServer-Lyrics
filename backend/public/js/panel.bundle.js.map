{"version":3,"sources":["webpack://website-apiServer-Lyrics/./frontend/services/SongService.js","webpack://website-apiServer-Lyrics/./frontend/UIPanel.js","webpack://website-apiServer-Lyrics/./frontend/services/CategoryService.js","webpack://website-apiServer-Lyrics/./frontend/services/LyricPublishService.js","webpack://website-apiServer-Lyrics/./frontend/services/LyricService.js","webpack://website-apiServer-Lyrics/./frontend/services/GenreService.js","webpack://website-apiServer-Lyrics/./frontend/panel.js","webpack://website-apiServer-Lyrics/./frontend/models/LyricsPublish.js"],"names":["this","URI","response","fetch","json","songId","song","reponse","headers","method","body","data","console","log","songTitle","songService","categoryService","categoryId","category","cateogry","_id","JSON","stringify","lyricPubService","lyricPub","lyricPubId","lyricId","lyric","genreId","genre","e","songs","searchSongLike","target","value","suggestions","document","querySelector","categories","getCategories","htmlCategory","inerHtmlCategories","html","map","RegExp","title","join","innerHTML","lyricsPub","getLyricsPublish","lyricCardContainer","getElementById","forEach","async","getSong","categorySelected","getCategory","div","createElement","className","categoryType","appendChild","postLyricPublish","renderLyricPub","reset","message","colorMessage","secondsToRemove","createTextNode","container","searchForm","insertBefore","setTimeout","remove","deleteLyricPublish","newCategory","getLyricPublish","updateLyricPub","addEventListener","uiPanel","displayMatches","classList","contains","getAttribute","selectedOptions","addANewLyricPub","toJson","renderMessage","preventDefault","unpublishLyric","updateLyricPubCategory"],"mappings":"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","file":"js/panel.bundle.js","sourcesContent":["class SongService {\r\n    constructor() {\r\n     //   this.URI =  'http://localhost:3000/api/songs';\r\n        this.URI =  '/api/songs';\r\n    }\r\n\r\n    async getSongs() {\r\n        // fetch por defecto hace GET\r\n        const response = await fetch(this.URI);\r\n        const songs = await response.json()\r\n        return songs;\r\n    }\r\n\r\n    async getSong(songId) {\r\n        const response = await fetch(`${this.URI}/${songId}`, {\r\n\r\n        });\r\n        const song = await response.json();\r\n        return song;\r\n    }\r\n\r\n    async postSong(song) {\r\n        const reponse = await fetch(this.URI, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: song\r\n        });\r\n        return await reponse.json();\r\n    }\r\n\r\n    async deleteSong(songId) {\r\n        const response = await fetch(`${this.URI}/${songId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE'\r\n        });\r\n        const data = await response.json();\r\n        console.log(data);\r\n    }\r\n\r\n    async searchSongLike(songTitle) {\r\n        console.log(songTitle);\r\n        const response = await fetch(`${this.URI}/search/search?q=${songTitle}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'GET'\r\n        });\r\n        return await response.json();\r\n    }\r\n\r\n}\r\nexport default SongService;","import  SongService from './services/SongService';\r\nimport Lyric from \"./models/Lyrics\";\r\nimport LyricService from \"./services/LyricService\";\r\nimport GenreService from \"./services/GenreService\";\r\nimport CategoryService from \"./services/CategoryService\";\r\nimport LyricPublishService from \"./services/LyricPublishService\";\r\nconst songService = new SongService();\r\nconst categoryService = new CategoryService();\r\nconst lyricPubService = new LyricPublishService()\r\nconst lyricService = new LyricService();\r\nconst genreService = new GenreService();\r\n\r\n\r\nclass UIPanel {\r\n\r\n\r\n    async displayMatches(e) {\r\n        const songs = await songService.searchSongLike(e.target.value);\r\n        const suggestions = document.querySelector('#table-hover');\r\n        const categories = await categoryService.getCategories();\r\n\r\n        const htmlCategory = this.inerHtmlCategories(categories);\r\n\r\n\r\n\r\n        const html = songs.map(song => {\r\n            const regex = new RegExp(e.target.value, 'gi');\r\n\r\n            return `\r\n                <tbody>\r\n                <th scope=\"row\" width=\"50%\"  >${song.title} </th> \r\n                <td width=\"40%\">\r\n                    <select class=\"form-control\" id=\"exampleSelect1-${song._id}\"> \r\n                    <option value=\"\" disabled selected>Select Category ...</option>\r\n                `\r\n                +\r\n                htmlCategory\r\n                +\r\n                `\r\n                    </select>\r\n                </td>\r\n                <td>\r\n                    <button type=\"button\" class=\"btn btn-success publish\" _id=\"${song._id}\">Publish</button>    \r\n                </td>\r\n                </tbody>\r\n            `\r\n\r\n        }).join('');\r\n        suggestions.innerHTML = html;\r\n    }\r\n\r\n    async renderLyricPub() {\r\n\r\n        const lyricsPub = await lyricPubService.getLyricsPublish();\r\n        const categories = await categoryService.getCategories();\r\n        const lyricCardContainer = document.getElementById('lyricPub-cards');\r\n\r\n        const htmlCategory = this.inerHtmlCategories(categories);\r\n\r\n\r\n        lyricCardContainer.innerHTML = '';\r\n        lyricsPub.forEach( async (lyricPub)  => {\r\n            const song = await songService.getSong(lyricPub.song);\r\n            const categorySelected = await categoryService.getCategory(lyricPub.category);\r\n\r\n            const div = document.createElement('div');\r\n            div.className = '';\r\n            div.innerHTML = `\r\n            <div class=\"card m-2\">\r\n            <div class=\"row\">\r\n            <div class=\"col-md-15\">\r\n            <div class=\"card-block px-4\">\r\n            <h4 class=\"card-title\"> ${song.title} </h4>\r\n            <p class=\"card-text\" id=\"song-id-${lyricPub._id}\"> \r\n            </p>\r\n            <a href=\"#\" class=\"btn btn-danger delete\" _id=\"${lyricPub._id}\">Delete</a>\r\n            <a href=\"#\" class=\"btn btn-success update\" _id=\"${lyricPub._id}\">Update</a>\r\n                <select class=\"form-control-update\" id=\"selectUpdate-${lyricPub._id}\"> \r\n                <option value=\"${categorySelected._id}\" selected>${categorySelected.categoryType}</option>\r\n                `\r\n                +\r\n                htmlCategory\r\n                +\r\n                `\r\n                </select>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            `;\r\n            lyricCardContainer.appendChild(div);\r\n        })\r\n    }\r\n\r\n    inerHtmlCategories(categories) {\r\n\r\n       const htmlCategory = categories.map( category => {\r\n            return `<option value=\"${category._id}\">  ${category.categoryType}  </option>`;\r\n\r\n        }).join('');\r\n       return htmlCategory\r\n    }\r\n\r\n\r\n    async addANewLyricPub(lyricPub) {\r\n        await lyricPubService.postLyricPublish(lyricPub);\r\n        this.renderLyricPub();\r\n    }\r\n\r\n    clearSongFrom() {\r\n        document.getElementById('song-form').reset();\r\n    }\r\n\r\n    renderMessage(message, colorMessage, secondsToRemove) {\r\n        const div = document.createElement('div');\r\n        div.className = `alert alert-${colorMessage}`;\r\n        div.appendChild(document.createTextNode(message));\r\n\r\n        const container = document.querySelector('.col-md-8');\r\n        const searchForm = document.querySelector('#search-form');\r\n\r\n        container.insertBefore(div, searchForm);\r\n        setTimeout(() => {\r\n            document.querySelector('.alert').remove();\r\n        }, secondsToRemove);\r\n\r\n    }\r\n\r\n    async unpublishLyric(lyricPubId) {\r\n        await lyricPubService.deleteLyricPublish(lyricPubId);\r\n        this.renderLyricPub();\r\n    }\r\n\r\n    async updateLyricPubCategory(lyricPubId, newCategory) {\r\n        const lyricPub = await lyricPubService.getLyricPublish(lyricPubId);\r\n\r\n        lyricPub.category = newCategory;\r\n        await lyricPubService.updateLyricPub(lyricPub);\r\n    }\r\n\r\n}\r\n\r\nexport default UIPanel;","class CategoryService {\r\n    constructor() {\r\n     //   this.URI = 'http://localhost:3000/api/category';\r\n        this.URI = '/api/category';\r\n    }\r\n\r\n    async getCategories() {\r\n        // fetch por defecto hace GET\r\n        const response = await fetch(this.URI);\r\n        const categories = await response.json()\r\n        return categories;\r\n    }\r\n\r\n    async getCategory(categoryId) {\r\n        const response = await fetch(`${this.URI}/${categoryId}`, {\r\n\r\n        });\r\n        const category = await response.json();\r\n        return category;\r\n    }\r\n\r\n    async postCategory(category) {\r\n        const reponse = await fetch(this.URI, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: category\r\n        });\r\n        return await reponse.json();\r\n    }\r\n\r\n    async deleteCategory(categoryId) {\r\n        const response = await fetch(`${this.URI}/${categoryId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE'\r\n        });\r\n        const data = await response.json();\r\n    }\r\n\r\n    async updateCategory(cateogry) {\r\n        const response = await fetch(`${this.URI}/${cateogry._id}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'PUT',\r\n            body: JSON.stringify(cateogry)\r\n        });\r\n        return await response.json();\r\n    }\r\n\r\n/*    async postLyricPublish(lyricPub) {\r\n        console.log(song, 'ANTES LOG');\r\n        const reponse = await fetch(this.URI, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: lyricPub\r\n        });\r\n        return await reponse.json();\r\n        console.log(data, 'DESPUES LOG');\r\n    }\r\n\r\n    async deleteLyricPublish(lyricPubId) {\r\n        const response = await fetch(`${this.URI}/${lyricPubId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE'\r\n        });\r\n        const data = await response.json();\r\n        console.log(data);\r\n    }*/\r\n\r\n}\r\nexport default CategoryService;","class LyricPublishService {\r\n    constructor() {\r\n      //  this.URI = 'http://localhost:3000/api/lyricsPublish';\r\n        this.URI = '/api/lyricsPublish';\r\n    }\r\n\r\n    async getLyricsPublish() {\r\n        // fetch por defecto hace GET\r\n        const response = await fetch(this.URI);\r\n        const lyricsPub = await response.json()\r\n        return lyricsPub;\r\n    }\r\n\r\n    async postLyricPublish(lyricPub) {\r\n        const reponse = await fetch(this.URI, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: lyricPub\r\n        });\r\n        return await reponse.json();\r\n    }\r\n\r\n    async deleteLyricPublish(lyricPubId) {\r\n        const response = await fetch(`${this.URI}/${lyricPubId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE'\r\n        });\r\n        const data = await response.json();\r\n    }\r\n\r\n    async getLyricPublish(lyricPubId) {\r\n        const response = await fetch(`${this.URI}/${lyricPubId}`, {\r\n\r\n        });\r\n        const lyricPub = await response.json();\r\n        return lyricPub;\r\n    }\r\n\r\n    async updateLyricPub(lyricPub) {\r\n        const response = await fetch(`${this.URI}/${lyricPub._id}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'PUT',\r\n            body: JSON.stringify(lyricPub)\r\n        });\r\n        return await response.json();\r\n    }\r\n\r\n}\r\nexport default LyricPublishService;","class LyricService {\r\n    constructor() {\r\n      //  this.URI =  'http://localhost:3000/api/lyrics';\r\n        this.URI =  '/api/lyrics';\r\n    }\r\n\r\n    async getLyrics() {\r\n        // fetch por defecto hace GET\r\n        const response = await fetch(this.URI);\r\n        const lyric = await response.json()\r\n        return lyric;\r\n    }\r\n\r\n    async getLyric(lyricId) {\r\n        const response = await fetch(`${this.URI}/${lyricId}`, {\r\n\r\n        });\r\n        const lyric = await response.json();\r\n        return lyric;\r\n    }\r\n\r\n    async postLyric(lyric) {\r\n        console.log(lyric, 'ANTES LOG');\r\n        const reponse = await fetch(this.URI, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: lyric\r\n        });\r\n        const data = await reponse.json();\r\n    }\r\n\r\n    async deleteLyric(lyricId) {\r\n        const response = await fetch(`${this.URI}/${lyricId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE'\r\n        });\r\n        const data = await response.json();\r\n    }\r\n\r\n}\r\nexport default LyricService;","class GenreService {\r\n    constructor() {\r\n       // this.URI = 'http://localhost:3000/api/genres';\r\n        this.URI = '/api/genres';\r\n    }\r\n\r\n    async getGenres() {\r\n        // fetch por defecto hace GET\r\n        const response = await fetch(this.URI);\r\n        const genres = await response.json()\r\n        return genres;\r\n    }\r\n\r\n    async getGenre(genreId) {\r\n        const response = await fetch(`${this.URI}/${genreId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'GET'\r\n        });\r\n        const genre = await response.json();\r\n        return genre;\r\n    }\r\n\r\n    async postSong(genre) {\r\n        console.log(genre, 'ANTES LOG');\r\n        const reponse = await fetch(this.URI, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: genre\r\n        });\r\n        return await reponse.json();\r\n    }\r\n\r\n    async deleteSong(genreId) {\r\n        const response = await fetch(`${this.URI}/${genreId}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE'\r\n        });\r\n        const data = await response.json();\r\n    }\r\n\r\n}\r\nexport default GenreService;","import './styles/style.css';\r\nimport UIPanel from './UIPanel';\r\nconst songService = new SongService();\r\n\r\nimport SongService from \"./services/SongService\";\r\nimport LyricsPublish from \"./models/LyricsPublish\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n//evento que carga antes datos\r\n document.addEventListener('DOMContentLoaded', () => {\r\n    const uiPanel = new UIPanel();\r\n    uiPanel.renderLyricPub();\r\n});\r\n\r\ndocument.querySelector(\"#search-songs\")\r\n    .addEventListener('keyup', e => {\r\n        const uiPanel = new UIPanel();\r\n        if(e.target.value != [])\r\n            uiPanel.displayMatches(e);\r\n    });\r\n\r\n\r\n// Formulario de alta cancion\r\ndocument.getElementById('search-content')\r\n    .addEventListener('click', e => {\r\n        if (e.target.classList.contains('publish')) {\r\n            console.log('entra puiblish');\r\n            const songId = e.target.getAttribute('_id');\r\n            const categoryId = document.getElementById('exampleSelect1-' + songId)\r\n                .selectedOptions[0].value;\r\n\r\n            const lyricPub = new LyricsPublish(songId,categoryId);\r\n            const uiPanel = new UIPanel();\r\n            uiPanel.addANewLyricPub(lyricPub.toJson());\r\n            uiPanel.renderMessage('Lyric Published', 'success', 3000);\r\n\r\n        }\r\n        e.preventDefault();\r\n    });\r\n\r\ndocument.getElementById('lyricPub-cards')\r\n    .addEventListener('click', e => {\r\n        if (e.target.classList.contains('delete')) {\r\n            const uiPanel = new UIPanel();\r\n            uiPanel.unpublishLyric(e.target.getAttribute('_id'));\r\n            uiPanel.renderMessage('Lyric unpublished', 'danger', 2000);\r\n        }\r\n        else if(e.target.classList.contains('update')) {\r\n            const uiPanel = new UIPanel();\r\n            const lyricPubId = e.target.getAttribute('_id');\r\n            const newCategory = document.getElementById('selectUpdate-' + lyricPubId)\r\n                .selectedOptions[0].value;\r\n\r\n            uiPanel.updateLyricPubCategory(lyricPubId, newCategory);\r\n            uiPanel.renderMessage('Lyric updated', 'success', 2000);\r\n\r\n\r\n        }\r\n        e.preventDefault();\r\n    });\r\n","class LyricsPublish {\r\n    constructor(songId, categoryId) {\r\n        this.song = songId;\r\n        this.category = categoryId;\r\n    }\r\n\r\n    toJson() {\r\n        const dataJson = JSON.stringify({\r\n            song: this.song,\r\n            category: this.category\r\n        })\r\n        return dataJson;\r\n    }\r\n}\r\n\r\nexport default LyricsPublish;"],"sourceRoot":""}