(()=>{"use strict";const t=class{constructor(){this.URI="/api/songs"}async getSongs(){const t=await fetch(this.URI);return await t.json()}async getSong(t){const e=await fetch(`${this.URI}/${t}`,{});return await e.json()}async postSong(t){const e=await fetch(this.URI,{headers:{"Content-Type":"application/json"},method:"POST",body:t});return await e.json()}async deleteSong(t){const e=await fetch(`${this.URI}/${t}`,{headers:{"Content-Type":"application/json"},method:"DELETE"}),n=await e.json();console.log(n)}async searchSongLike(t){console.log(t);const e=await fetch(`${this.URI}/search/search?q=${t}`,{headers:{"Content-Type":"application/json"},method:"GET"});return await e.json()}},e=new t,n=new class{constructor(){this.URI="/api/category"}async getCategories(){const t=await fetch(this.URI);return await t.json()}async getCategory(t){const e=await fetch(`${this.URI}/${t}`,{});return await e.json()}async postCategory(t){const e=await fetch(this.URI,{headers:{"Content-Type":"application/json"},method:"POST",body:t});return await e.json()}async deleteCategory(t){const e=await fetch(`${this.URI}/${t}`,{headers:{"Content-Type":"application/json"},method:"DELETE"});await e.json()}async updateCategory(t){const e=await fetch(`${this.URI}/${t._id}`,{headers:{"Content-Type":"application/json"},method:"PUT",body:JSON.stringify(t)});return await e.json()}},s=new class{constructor(){this.URI="/api/lyricsPublish"}async getLyricsPublish(){const t=await fetch(this.URI);return await t.json()}async postLyricPublish(t){const e=await fetch(this.URI,{headers:{"Content-Type":"application/json"},method:"POST",body:t});return await e.json()}async deleteLyricPublish(t){const e=await fetch(`${this.URI}/${t}`,{headers:{"Content-Type":"application/json"},method:"DELETE"});await e.json()}async getLyricPublish(t){const e=await fetch(`${this.URI}/${t}`,{});return await e.json()}async updateLyricPub(t){const e=await fetch(`${this.URI}/${t._id}`,{headers:{"Content-Type":"application/json"},method:"PUT",body:JSON.stringify(t)});return await e.json()}};new class{constructor(){this.URI="/api/lyrics"}async getLyrics(){const t=await fetch(this.URI);return await t.json()}async getLyric(t){const e=await fetch(`${this.URI}/${t}`,{});return await e.json()}async postLyric(t){console.log(t,"ANTES LOG");const e=await fetch(this.URI,{headers:{"Content-Type":"application/json"},method:"POST",body:t});await e.json()}async deleteLyric(t){const e=await fetch(`${this.URI}/${t}`,{headers:{"Content-Type":"application/json"},method:"DELETE"});await e.json()}},new class{constructor(){this.URI="/api/genres"}async getGenres(){const t=await fetch(this.URI);return await t.json()}async getGenre(t){const e=await fetch(`${this.URI}/${t}`,{headers:{"Content-Type":"application/json"},method:"GET"});return await e.json()}async postSong(t){console.log(t,"ANTES LOG");const e=await fetch(this.URI,{headers:{"Content-Type":"application/json"},method:"POST",body:t});return await e.json()}async deleteSong(t){const e=await fetch(`${this.URI}/${t}`,{headers:{"Content-Type":"application/json"},method:"DELETE"});await e.json()}};const a=class{async displayMatches(t){const s=await e.searchSongLike(t.target.value),a=document.querySelector("#table-hover"),i=await n.getCategories(),o=this.inerHtmlCategories(i),c=s.map((e=>(new RegExp(t.target.value,"gi"),`\n                <tbody>\n                <th scope="row" width="50%"  >${e.title} </th> \n                <td width="40%">\n                    <select class="form-control" id="exampleSelect1-${e._id}"> \n                    <option value="" disabled selected>Select Category ...</option>\n                `+o+`\n                    </select>\n                </td>\n                <td>\n                    <button type="button" class="btn btn-success publish" _id="${e._id}">Publish</button>    \n                </td>\n                </tbody>\n            `))).join("");a.innerHTML=c}async renderLyricPub(){const t=await s.getLyricsPublish(),a=await n.getCategories(),i=document.getElementById("lyricPub-cards"),o=this.inerHtmlCategories(a);i.innerHTML="",t.forEach((async t=>{const s=await e.getSong(t.song),a=await n.getCategory(t.category),c=document.createElement("div");c.className="",c.innerHTML=`\n            <div class="card m-2">\n            <div class="row">\n            <div class="col-md-15">\n            <div class="card-block px-4">\n            <h4 class="card-title"> ${s.title} </h4>\n            <p class="card-text" id="song-id-${t._id}"> \n            </p>\n            <a href="#" class="btn btn-danger delete" _id="${t._id}">Delete</a>\n            <a href="#" class="btn btn-success update" _id="${t._id}">Update</a>\n                <select class="form-control-update" id="selectUpdate-${t._id}"> \n                <option value="${a._id}" selected>${a.categoryType}</option>\n                `+o+"\n                </select>\n            </div>\n            </div>\n            </div>\n            </div>\n            ",i.appendChild(c)}))}inerHtmlCategories(t){return t.map((t=>`<option value="${t._id}">  ${t.categoryType}  </option>`)).join("")}async addANewLyricPub(t){await s.postLyricPublish(t),this.renderLyricPub()}clearSongFrom(){document.getElementById("song-form").reset()}renderMessage(t,e,n){const s=document.createElement("div");s.className=`alert alert-${e}`,s.appendChild(document.createTextNode(t));const a=document.querySelector(".col-md-8"),i=document.querySelector("#search-form");a.insertBefore(s,i),setTimeout((()=>{document.querySelector(".alert").remove()}),n)}async unpublishLyric(t){await s.deleteLyricPublish(t),this.renderLyricPub()}async updateLyricPubCategory(t,e){const n=await s.getLyricPublish(t);n.category=e,await s.updateLyricPub(n)}};new t,document.addEventListener("DOMContentLoaded",(()=>{(new a).renderLyricPub()})),document.querySelector("#search-songs").addEventListener("keyup",(t=>{const e=new a;t.target.value!=[]&&e.displayMatches(t)})),document.getElementById("search-content").addEventListener("click",(t=>{if(t.target.classList.contains("publish")){console.log("entra puiblish");const e=t.target.getAttribute("_id"),n=document.getElementById("exampleSelect1-"+e).selectedOptions[0].value,s=new class{constructor(t,e){this.song=t,this.category=e}toJson(){return JSON.stringify({song:this.song,category:this.category})}}(e,n),i=new a;i.addANewLyricPub(s.toJson()),i.renderMessage("Lyric Published","success",3e3)}t.preventDefault()})),document.getElementById("lyricPub-cards").addEventListener("click",(t=>{if(t.target.classList.contains("delete")){const e=new a;e.unpublishLyric(t.target.getAttribute("_id")),e.renderMessage("Lyric unpublished","danger",2e3)}else if(t.target.classList.contains("update")){const e=new a,n=t.target.getAttribute("_id"),s=document.getElementById("selectUpdate-"+n).selectedOptions[0].value;e.updateLyricPubCategory(n,s),e.renderMessage("Lyric updated","success",2e3)}t.preventDefault()}))})();
//# sourceMappingURL=panel.bundle.js.map